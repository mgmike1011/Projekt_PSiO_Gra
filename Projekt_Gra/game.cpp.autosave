#include "game.h"

void Game::setPause(bool wybor)
{
    pauza=wybor;
}

bool Game::getPause()
{
    return pauza;
}

Game::Game() : sf::RenderWindow(sf::VideoMode(1280,720),"Space war")
{
    this->setFramerateLimit(60);//ustawinie limitu klatek, 60, jak na nowej generacji konsol :)
    this->setActive(true);
    this->setVerticalSyncEnabled(false);
    //tlo
    backgroundtx_c.setRepeated(true);
    if(!backgroundtx_c.loadFromFile("resources/Tlo/tlo.png"))
    {
        std::cerr<<"Blad wczytania tekstury tla"<<std::endl;
    }
    backgroundtx_c.setSmooth(true);
    background_c.setTexture(&backgroundtx_c);
    background_c.setPosition(0,0);
    background_c.setSize(sf::Vector2f(1280,720));
    // Gwiezdny pyl
    for(auto &el : pyl_c)
    {
        el.position = sf::Vector2f(rand()%1280,rand()%720);
        el.color = sf::Color::White;
    }
    // Przypisanie czcionki
    if(!czcionka_c.loadFromFile("resources/Czcionki/OpenSans-Bold.ttf"))
    {
        std::cout<<"Blad wczytania czcionki"<<std::endl;
    }
    // Ladowanie tekstury dla pociskow
    Textury_c["Pocisk"] = new sf::Texture();
    Textury_c["Pocisk"]->loadFromFile("resources/Pociski/laserBlue02.png");
    // Ustawienia napisow
    punkty_c.setPosition(sf::Vector2f(1100,680));
    punkty_c.setFont(czcionka_c);
    punkty_c.setFillColor(sf::Color::White);
    punkty_c.setCharacterSize(25);
    // Napis konca gry
    koncowy_c.setFont(czcionka_c);
    koncowy_c.setPosition(sf::Vector2f(600,300));
    koncowy_c.setFillColor(sf::Color::Red);
    koncowy_c.setCharacterSize(60);
    koncowy_c.setString("Koniec gry!!!");
    // Status zycia (pasek zdrowia)
    pasek_zdrowa.setSize(sf::Vector2f(400,50));
    pasek_zdrowa.setOutlineColor(sf::Color::White);
    pasek_zdrowa.setOutlineThickness(2);
    pasek_zdrowa.setFillColor(sf::Color::Red);
    pasek_zdrowa.setPosition(sf::Vector2f(10,10));
    pasek_zdrowia_max = pasek_zdrowa;
    pasek_zdrowia_max.setFillColor(sf::Color::Black);
    gracz = new Player;
}

Game::~Game()
{
    delete gracz;
    for(auto *el : Przeciwnicy)
    {
        delete el;
    }
    for(auto &el : Textury_c)
    {
        delete el.second;
    }
    for(auto *el : pociski)
    {
        delete el;
    }
}

void Game::run()
{
    
    sf::Transform pyl_c_Move;//ruch pylu
    // Wydarzenia
    sf::Time tpause;
    sf::Clock zegar;
    while(this->isOpen())
    {
        sf::Event event;
        while(this->pollEvent(event))
        {
            if (event.type == sf::Event::Closed || (sf::Keyboard::isKeyPressed(sf::Keyboard::Escape))) //Zamykanie okna
            {
                this->close();
            }
        }
        sf::Time elapsed = zegar.restart();
        //pyl gwiezdny - imersja ruchu
        //#################################################################################################################
        draw(pyl_c,750,sf::PrimitiveType::Points);
        for(auto &el:pyl_c)
        {
            el.position.y = el.position.y -(rand()%3+1);
            if(pyl_c_Move.transformPoint(el.position).y<=1290) //po wyjsciu za krawedz cofa je na sam poczatek
            {
                el.position.y = 0;
            }
        }
        //######################################################################################################
    }
}

void Game::gameover(Player &gracz)
{
    ss<<"Udalo ci sie zdobyc : "<<gracz.getPunkty();
    koncowy_c.setString(ss.str());
    draw(koncowy_c);
}



void Game::update_gry()
{
    Enemy *enemy;
    for(auto it = Enemy_c.begin();it!=Enemy_c.end();it++)
    {
        enemy = &(*it);
        if(enemy->getPosition().x<0||enemy->getPosition().y<-20||enemy->getifkill())
        {
            Enemy_c.erase(it);
            it--;
            continue;
        }
        enemy->update_enemy();
        this->draw(*enemy);
    }
}

void Game::update_player(Player &gracz)
{
    // Aktualizacja stanu zdrowia i paska stanu zdrowia
    if(gracz.gethp()>0)
    {
        gracz.pasek_zdrowia.setSize(sf::Vector2f(gracz.gethp(),10));
        for (auto &el: Enemy_c)
        {
            if(el.getGlobalBounds().left<=gracz.getGlobalBounds().left+gracz.getGlobalBounds().width &&gracz.getGlobalBounds().intersects(el.getGlobalBounds()))
            {
                bool stoop = false;
                for(auto & pkt:gracz.getPunktykolizji())
                {
                    sf::Vector2f p(pkt);
                    float x = gracz.getTexture()->getSize().x/2;
                    float y = gracz.getTexture()->getSize().y/2;
                    if(Kolizja(el.getwierzcholki(),sf::Vector2f(gracz.getPosition().x-x+p.x,gracz.getPosition().y-y+p.y)))
                    {
                        el.setkill(true);
                        gracz.sethp(gracz.gethp()-el.getPointCount());
                        stoop = true;
                        break;
                    }
                }
                if(stoop)
                {
                    break;
                }
            }
        }
        // Aktualizacja stanu pociskow
        for(auto &el:gracz.getpociski())
        {
            update_bullet(el,gracz);
        }
        for(auto it =  gracz.pociski.begin();it!=gracz.pociski.end();it++)
        {
            if(it->getifkill()||it->getPosition().x>1300)
            {
                gracz.pociski.erase(it);
            }
        }
    }
}

